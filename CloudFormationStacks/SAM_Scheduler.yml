AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31
Description: "API Gateway and Lambda function"
Resources:

#####################################################
## IAM ROLES 
#####################################################

 LambdaSchedulerApiFnRole:
    Type: AWS::IAM::Role
    Properties: 
     AssumeRolePolicyDocument:
            Version: '2012-10-17'
            Statement:
            - Effect: Allow
              Principal:
                Service: lambda.amazonaws.com
              Action: sts:AssumeRole
     Description: LambdaSchedulerApiFn
     ManagedPolicyArns:
     - arn:aws:iam::aws:policy/AmazonEC2ReadOnlyAccess
     - arn:aws:iam::aws:policy/AmazonRDSReadOnlyAccess
     - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
     RoleName: LambdaSchedulerApiFn

 LambdaSchedulerApiFnPolicyRdsAddTags:
    Type: 'AWS::IAM::ManagedPolicy'
    Properties:
      ManagedPolicyName: RdsAddTags
      Roles:
       - !Ref LambdaSchedulerApiFnRole
      PolicyDocument:
        Version: 2012-10-17
        Statement:
            - Sid: VisualEditor0
              Effect: Allow
              Action: rds:AddTagsToResource
              Resource: "*"
 LambdaSchedulerApiFnPolicyEc2AddTags:
    Type: 'AWS::IAM::ManagedPolicy'
    Properties:
      ManagedPolicyName: Ec2AddTags
      Roles:
       - !Ref LambdaSchedulerApiFnRole
      PolicyDocument:
        Version: 2012-10-17
        Statement:
            - Sid: VisualEditor0
              Effect: Allow
              Action: ec2:CreateTags
              Resource: "*"
 LambdaSchedulerApiFnPolicyAsGrpAddTags:
    Type: 'AWS::IAM::ManagedPolicy'
    Properties:
      ManagedPolicyName: AsGrpAddTags
      Roles:
       - !Ref LambdaSchedulerApiFnRole
      PolicyDocument:
        Version: 2012-10-17
        Statement:
            - Sid: VisualEditor0
              Effect: Allow
              Action: 
                  - autoscaling:DeleteTags
                  - autoscaling:CreateOrUpdateTags
                  - autoscaling:CreateAutoScalingGroup     
              Resource: "*"


 LambdaSchedulerExecFnRole:
    Type: AWS::IAM::Role
    Properties: 
     AssumeRolePolicyDocument:
            Version: '2012-10-17'
            Statement:
            - Effect: Allow
              Principal:
                Service: lambda.amazonaws.com
              Action: sts:AssumeRole
     Description: LambdaSchedulerExecFn
     ManagedPolicyArns:
     - arn:aws:iam::aws:policy/AmazonRDSFullAccess
     - arn:aws:iam::aws:policy/AmazonEC2FullAccess
     - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
     RoleName: LambdaSchedulerExecFn

#####################################################
## LAMBDA
#####################################################

 SchedulerFunctionsLayer:
  Type: AWS::Lambda::LayerVersion
  Properties:
    CompatibleRuntimes:
      - python3.6
      - python3.7
    Content:
      S3Bucket: 
       Fn::ImportValue: CodeSourceBucketName       
      S3Key: SchedulerFunctions.zip
    Description: SchedulerFunctions
    LayerName: SchedulerFunctionsLayer
    LicenseInfo: MIT
    
 ResourcesApi:
   Type: AWS::Lambda::Function
   Properties:
     Code:
      S3Bucket: 
       Fn::ImportValue: CodeSourceBucketName       
      S3Key: "ResourcesApi.zip"
     Description: "ResourcesApi LAMBDA"
     Runtime: "python3.7"
     MemorySize: 128
     Timeout: 300
     FunctionName: "ResourcesApi"
     Handler: "ResourcesApi.lambda_handler"
     Role: !GetAtt ["LambdaSchedulerApiFnRole", "Arn"]
     Layers:
        - !Ref SchedulerFunctionsLayer
 SchedulerCheckAndApply:
   Type: AWS::Lambda::Function
   Properties:
     Code:
      S3Bucket: 
       Fn::ImportValue: CodeSourceBucketName       
      S3Key: "SchedulerCheckAndApply.zip"
     Description: "SchedulerCheckAndApply LAMBDA"
     Runtime: "python3.7"
     MemorySize: 128  
     Timeout: 300   
     FunctionName: "SchedulerCheckAndApply"
     Handler: "SchedulerCheckAndApply.lambda_handler"
     Role: !GetAtt ["LambdaSchedulerExecFnRole", "Arn"]
     Layers:
        - !Ref SchedulerFunctionsLayer


 ApiGatewayResourcesApiListInvoke:
   Type: "AWS::Lambda::Permission"
   Properties:
     Action: "lambda:InvokeFunction"
     FunctionName: !GetAtt "ResourcesApi.Arn"
     Principal: "apigateway.amazonaws.com"
     SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${apiGateway}/*/GET/list"
 ApiGatewayResourcesApiUpdateInvoke:
   Type: "AWS::Lambda::Permission"
   Properties:
     Action: "lambda:InvokeFunction"
     FunctionName: !GetAtt "ResourcesApi.Arn"
     Principal: "apigateway.amazonaws.com"
     SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${apiGateway}/*/GET/updateschedule"


#####################################################
## CloudWatch Events
#####################################################

 EventToExec: 
      Type: AWS::Events::Rule
      Properties: 
        Description: "Exec every 5 Minutes"
        ScheduleExpression: "rate(5 minutes)"
        State: "ENABLED"
        Targets: 
          - 
            Arn: 
              Fn::GetAtt: 
                - "SchedulerCheckAndApply"
                - "Arn"
            Id: "TargetSchedulerCheckAndApply"
 PermissionForEventsToInvokeLambda: 
      Type: AWS::Lambda::Permission
      Properties: 
        FunctionName: 
          Ref: "SchedulerCheckAndApply"
        Action: "lambda:InvokeFunction"
        Principal: "events.amazonaws.com"
        SourceArn: 
          Fn::GetAtt: 
            - "EventToExec"
            - "Arn"       
  
#####################################################
## API GW
#####################################################

 apiGateway:
    Type: "AWS::ApiGateway::RestApi"
    Properties:
      Name: "SchedulerViewEditApi"
      Description: "Scheduler View and Edit Api"
 list:
   Type: AWS::ApiGateway::Resource
   Properties: 
    RestApiId: !Ref apiGateway
    ParentId: !GetAtt 
      - apiGateway
      - RootResourceId
    PathPart: list     
 updateschedule:
   Type: AWS::ApiGateway::Resource
   Properties: 
    RestApiId: !Ref apiGateway
    ParentId: !GetAtt 
      - apiGateway
      - RootResourceId
    PathPart: updateschedule   

 listMethod:
    Type: "AWS::ApiGateway::Method"
    Properties:
      AuthorizationType: "COGNITO_USER_POOLS"
      AuthorizerId: !Ref CognitoAuthorizer
      HttpMethod: "GET"
      Integration:
        IntegrationHttpMethod: "POST"
        Type: "AWS_PROXY"
        Uri: !Sub
          - "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${lambdaArn}/invocations"
          - lambdaArn: !GetAtt "ResourcesApi.Arn"  
      ResourceId: !Ref list
      RestApiId: !Ref apiGateway
 

 listOptionsMethod:
  Type: AWS::ApiGateway::Method
  Properties:
    AuthorizationType: NONE
    RestApiId:
      Ref: apiGateway
    ResourceId:
      Ref: list
    HttpMethod: OPTIONS
    Integration:
      IntegrationResponses:
      - StatusCode: 200
        ResponseParameters:
          method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
          method.response.header.Access-Control-Allow-Methods: "'GET,POST,OPTIONS'"
          method.response.header.Access-Control-Allow-Origin: "'*'"
        ResponseTemplates:
          application/json: ''
      PassthroughBehavior: WHEN_NO_MATCH
      RequestTemplates:
        application/json: '{"statusCode": 200}'
      Type: MOCK
    MethodResponses:
    - StatusCode: 200
      ResponseModels:
        application/json: 'Empty'
      ResponseParameters:
          method.response.header.Access-Control-Allow-Headers: false
          method.response.header.Access-Control-Allow-Methods: false
          method.response.header.Access-Control-Allow-Origin: false
          
          
 
 updateMethod:
    Type: "AWS::ApiGateway::Method"
    Properties:
      AuthorizationType: "COGNITO_USER_POOLS"
      AuthorizerId: !Ref CognitoAuthorizer
      HttpMethod: "GET"
      RequestParameters:
       method.request.querystring.resourceId: true
       method.request.querystring.ResourceType: true
       method.request.querystring.ScheduleTimings: true
       method.request.querystring.ScheduleWeekDays: true     
       method.request.querystring.ScheduleOverRide: true       
      Integration:
        IntegrationHttpMethod: "POST"
        Type: "AWS_PROXY"
        Uri: !Sub
          - "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${lambdaArn}/invocations"
          - lambdaArn: !GetAtt "ResourcesApi.Arn"    
      ResourceId: !Ref updateschedule
      RestApiId: !Ref apiGateway          
 updateOptionsMethod:
  Type: AWS::ApiGateway::Method
  Properties:
    AuthorizationType: NONE
    RestApiId:
      Ref: apiGateway
    ResourceId:
      Ref: updateschedule
    HttpMethod: OPTIONS
    Integration:
      IntegrationResponses:
      - StatusCode: 200
        ResponseParameters:
          method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
          method.response.header.Access-Control-Allow-Methods: "'GET,POST,OPTIONS'"
          method.response.header.Access-Control-Allow-Origin: "'*'"
        ResponseTemplates:
          application/json: ''
      PassthroughBehavior: WHEN_NO_MATCH
      RequestTemplates:
        application/json: '{"statusCode": 200}'
      Type: MOCK
    MethodResponses:
    - StatusCode: 200
      ResponseModels:
        application/json: 'Empty'
      ResponseParameters:
          method.response.header.Access-Control-Allow-Headers: false
          method.response.header.Access-Control-Allow-Methods: false
          method.response.header.Access-Control-Allow-Origin: false


 apiGatewayDeploymentMain:
    Type: "AWS::ApiGateway::Deployment"
    DependsOn:
      - "listMethod"
    Properties:
      RestApiId: !Ref "apiGateway"

 apiGatewayStageProd:
  Type: AWS::ApiGateway::Stage
  Properties: 
   DeploymentId: !Ref apiGatewayDeploymentMain
   Description: Debug
   RestApiId: !Ref apiGateway
   StageName: Prod

   
 CognitoAuthorizer:
  Type: AWS::ApiGateway::Authorizer
  DependsOn:
   - cognitoUserPool
  Properties: 
   IdentitySource: method.request.header.Authorization
   Name: CognitoAuthorizer
   ProviderARNs:  
    - !GetAtt cognitoUserPool.Arn 
   RestApiId: !Ref apiGateway
   Type: COGNITO_USER_POOLS
  
  
#####################################################
## COGNITO
#####################################################

  
 cognitoUserPool:
  Type: AWS::Cognito::UserPool
  Properties: 
   AdminCreateUserConfig: 
     AllowAdminCreateUserOnly: True
   Policies: 
    PasswordPolicy: 
        MinimumLength: 6
        RequireLowercase: false
        RequireNumbers: false
        RequireSymbols: false
        RequireUppercase: false
        TemporaryPasswordValidityDays: 7
   UserPoolName: DashBoardPool

 UserPoolClient:
  Type: AWS::Cognito::UserPoolClient
  Properties: 
   ClientName: DashBoardPoolClient
   ExplicitAuthFlows: 
    - ALLOW_USER_PASSWORD_AUTH 
    - ALLOW_USER_SRP_AUTH 
    - ALLOW_REFRESH_TOKEN_AUTH
   GenerateSecret: false
   RefreshTokenValidity: 30
   PreventUserExistenceErrors: ENABLED
   SupportedIdentityProviders: 
    - COGNITO
   UserPoolId: !Ref cognitoUserPool

 UserDashboard1:
  Type: AWS::Cognito::UserPoolUser
  Properties: 
   Username: dashboard1
   UserPoolId: !Ref cognitoUserPool
    



Outputs:
  ApiGatewayListURL:
    Value: !Sub 
     - "https://${apiGateway}.execute-api.${AWS::Region}.amazonaws.com/${Deployment}/list"
     - Deployment: !Ref apiGatewayStageProd
  apiGatewayID:
   Value: !Ref apiGateway 
   Export:
     Name: apiGatewayID    
  cognitoUserPoolID:
   Value: !Ref cognitoUserPool      
   Export:
     Name: cognitoUserPoolID     
  UserPoolClientId:
   Value: !Ref UserPoolClient     
   Export:
     Name: UserPoolClientId     
  JsSDK:
    Value: !Sub "aws apigateway get-sdk --rest-api-id ${apiGateway} --stage-name Prod --sdk-type javascript API_SDK.zip"
  SchedulerFunctionsLayer:
    Value: !Ref SchedulerFunctionsLayer
    Description: SchedulerFunctionsLayer ARN
    Export:
     Name: SchedulerFunctionsLayerARN        
  ResourcesApi:
    Value: !Ref ResourcesApi
    Description: ResourcesApi ARN
    Export:
     Name: ResourcesApiARN  
  SchedulerCheckAndApply:
    Value: !Ref SchedulerCheckAndApply
    Description: SchedulerCheckAndApply ARN
    Export:
     Name: SchedulerCheckAndApplyARN           
    
