name: DeployAndUpdateCode
on:
  push:
    branches:
    - master
    tags:        
    - '*'
    paths:
    - 'CloudFormationStacks/*.yml'
    - 'InfraDeployTriggerFile.txt'
    - '**.py'
    - 'PythonUpdateTriggerFile.txt'


jobs:
  debug_info:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v1
    - name: Dump GitHub context
      env:
        GITHUB_CONTEXT: ${{ toJson(github) }}
      run: echo "$GITHUB_CONTEXT"
    - name: Show GitHub ref
      run: echo "$GITHUB_REF"
    - name: Dump event JSON
      env:
        EVENT_JSON_FILENAME: ${{ github.event_path }}
      run: cat "$EVENT_JSON_FILENAME"
    - name: Dump commit message
      env:
        MESSAGE: ${{ github.event.head_commit.message }}
      run: cat "$MESSAGE"      
    - name: echo commit.message
      run: echo ${{ github.event.head_commit.message }}       

    
  cloudformation_deploy:
    if: contains(github.event.head_commit.message, 'infra_deploy')
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - uses: montudor/action-zip@v0.1.0
      with:
         args: zip -r SchedulerFunctions.zip python/
    - uses: montudor/action-zip@v0.1.0
      with:
         args: zip ResourcesApi.zip ResourcesApi.py 
    - uses: montudor/action-zip@v0.1.0
      with:
         args: zip SchedulerCheckAndApply.zip SchedulerCheckAndApply.py 
         
    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: eu-west-1
        
    - name: CloudFormation Deploy S3 Stacks
      run: | 
        aws cloudformation deploy  --stack-name S3 --template-file CloudFormationStacks/S3.yml --no-fail-on-empty-changeset
    - name: Copy files to S3 with the AWS CLI
      run: |
        ARN=$(aws cloudformation list-exports --query "Exports[?Name=='CodeSourceBucketARN'].Value" --no-paginate --output text )
        BucketName=$(aws cloudformation list-exports --query "Exports[?Name=='CodeSourceBucketARN'].Value" --no-paginate --output text | sed 's/arn:aws:s3::://')
        echo "BucketName $BucketName"
        aws s3 cp SchedulerCheckAndApply.zip s3://$BucketName
        aws s3 cp ResourcesApi.zip s3://$BucketName
        aws s3 cp SchedulerFunctions.zip s3://$BucketName        
    - name: CloudFormation Deploy Scheduler Stack
      run: | 
        aws cloudformation deploy  --stack-name Scheduler --template-file CloudFormationStacks/Scheduler.yml --no-fail-on-empty-changeset --capabilities CAPABILITY_NAMED_IAM


  updatecode:
    if: contains(github.event.head_commit.message, 'python_update')
    runs-on: ubuntu-latest
    needs: cloudformation_deploy
    steps:
    - uses: actions/checkout@v2
    - uses: montudor/action-zip@v0.1.0
      with:
         args: zip -r SchedulerFunctions.zip python/
    - uses: montudor/action-zip@v0.1.0
      with:
         args: zip ResourcesApi.zip ResourcesApi.py 
    - uses: montudor/action-zip@v0.1.0
      with:
         args: zip SchedulerCheckAndApply.zip SchedulerCheckAndApply.py 
         
    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: eu-west-1
        
    - name: Copy files to S3 with the AWS CLI
      run: |
        BucketName=$(aws cloudformation list-exports --query "Exports[?Name=='CodeSourceBucketName'].Value" --no-paginate --output text )
        echo "BucketName $BucketName"
        aws s3 cp SchedulerCheckAndApply.zip s3://$BucketName
        aws s3 cp ResourcesApi.zip s3://$BucketName
        aws s3 cp SchedulerFunctions.zip s3://$BucketName
    - name: lambda code update
      run: |     
        BucketName=$(aws cloudformation list-exports --query "Exports[?Name=='CodeSourceBucketName'].Value" --no-paginate --output text )
        echo "BucketName $BucketName"
        LayerArn=$(aws cloudformation list-exports --query "Exports[?Name=='SchedulerFunctionsLayerARN'].Value" --no-paginate --output text | cut --delimiter=: --fields=1,2,3,4,5,6,7 )
        echo "LayerArn: ${LayerArn}"
        LayerName=$(echo $LayerArn | cut --fields=7 --delimiter=: )
        echo "LayerName: ${LayerName}"
        NewVersionNumber=$(aws lambda publish-layer-version --layer-name $LayerName --content S3Bucket=$BucketName,S3Key=SchedulerFunctions.zip --compatible-runtimes python3.6 python3.7 | awk '/"Version":/ {print $2}' | sed 's/,//')
        echo "NewVersionNumber: ${NewVersionNumber}"
        aws lambda update-function-code --function-name ResourcesApi --s3-bucket $BucketName --s3-key ResourcesApi.zip
        aws lambda update-function-code --function-name SchedulerCheckAndApply --s3-bucket $BucketName --s3-key SchedulerCheckAndApply.zip
        aws lambda update-function-configuration --function-name SchedulerCheckAndApply --layers "${LayerArn}:${NewVersionNumber}"
        aws lambda update-function-configuration --function-name ResourcesApi --layers "${LayerArn}:${NewVersionNumber}"


